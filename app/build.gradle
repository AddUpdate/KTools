import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

//apply plugin: 'com.google.gms.google-services'


android {

    //仅仅在编译的时候起作用，建议总是使用最新版本，值是一个API Level
    compileSdkVersion libVersion.compileSdkVersion

    //构建工具的版本，在build-tools中的那些(aapt,dexdump,zipalign,apksigner)，一般是API-Level.x.x
    buildToolsVersion libVersion.buildToolsVersion

    defaultConfig {
        applicationId "com.jiangkang.ktools"

        //支持的最早版本，Lint会检查这之上的API的使用进行提示，app的minSdkVersion至少要和依赖的library一样大
        minSdkVersion libVersion.minSdkVersion

        //提供向前兼容的主要方式，除非targetSdkVersion更新，不应用新的行为变化，使你在应用新的行为变化之前可以使用新的API（compileSdkVersion）
        //更新targetSdkVersion的时候应该进行充分的测试
        targetSdkVersion libVersion.targetSdkVersion
        versionCode libVersion.versionCode
        versionName libVersion.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [
//                        moduleName: project.getName()
////                        eventBusIndex : 'com.jiangkang.ktools.KEventBusIndex'
//                ]
//            }
//        }

        ndk {
            abiFilters  "armeabi-v7a"
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }


    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res/layout/activity',
                    'src/main/res/layout/fragment',
                    'src/main/res/layout/widget',
                    'src/main/res/layout/item',
                    'src/main/res'
            ]
        }
    }


    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    dexOptions {
        javaMaxHeapSize = '4g'
    }

    lintOptions {

        //关闭检查指定的Issue Id
        disable 'TypographyFractions','TypographyQuotes'

        //打开指定的Issue的检查
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'

        //仅仅只检查这些的子集，其他的不检查，这个选项会覆盖上面的disable，enable配置
        check 'NewApi', 'InlinedApi'

        //如果设置为true，则会关闭lint的分析进度
        quiet false

        //如果设置为true(默认)，如果发现错误就停止构建
        abortOnError false

        //如果设置为true，则只报告error
        ignoreWarnings true
    }

    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    dataBinding {
        enabled = true
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.support['vector-drawable']
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    testImplementation deps.robolectric

    debugImplementation deps.leakcanary.leakcanary
    releaseImplementation deps.leakcanary.leakcanary_no_op

    debugImplementation deps['debug_db']
//    debugImplementation 'com.facebook.sonar:sonar:0.0.1'

    implementation deps.butterKnife.butterKnife
    annotationProcessor deps.butterKnife.compiler

    implementation deps['rxAndroid']
    implementation deps['rxJava']

//    implementation 'com.facebook.stetho:stetho:1.5.0'
//    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'

    implementation deps.support.v7
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support['constraint-layout']
    implementation deps.support.degisn

    implementation deps.retrofit.retrofit
    implementation deps.retrofit["converter-json"]
    implementation deps.retrofit["adpter-rxjava2"]

    debugImplementation 'com.readystatesoftware.chuck:library:1.1.0'
    releaseImplementation 'com.readystatesoftware.chuck:library-no-op:1.1.0'

    implementation deps.dagger['dagger-android']
    implementation deps.dagger['dagger-android-support']
    annotationProcessor deps.dagger['dagger-compiler']

    implementation deps.glide.glide
    implementation deps.glide.okhttp
    annotationProcessor deps.glide.compiler

    implementation deps.okhttp.okhttp3
    implementation deps.okhttp.logginginterceptor

    implementation deps.arch.lifecycle.extensions
    implementation deps.arch.lifecycle.runtime
    implementation deps.arch.room.runtime
    annotationProcessor deps.arch.room.compiler
    implementation deps.arch.room.rxjava2

//    implementation deps.arouter.arouter_api
//    annotationProcessor deps.arouter.arouter_compiler
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"

    implementation deps.support.multidex

    implementation project(path: ':widget')
    implementation project(path: ':requests')
    implementation project(path: ':annotations')
    implementation project(path: ':aop')
    implementation project(path: ':hack')
    implementation project(path: ':tools')
    implementation project(path: ':kdownloader')
//    implementation project(path: ':weex')

    implementation project(path: ':hybrid')
    implementation project(path: ':jni')
    implementation project(path: ':storage')
    annotationProcessor project(path: ':compiler')

    implementation deps.eventbus.eventbus
    implementation deps.anrwatchdog

    implementation deps.arch.navigation.fragment
    implementation deps.arch.navigation.ui

    implementation project(path: ':jetpack')
    implementation project(path: ':anko')
    implementation project(path: ':image')

    lintChecks project(path: ':klint')



}


task copy(type: Copy) {
    from "build/outputs/apk/debug/"
    into "build/outputs/apk/"
    include '**/*'
    delete "build/outputs/apk/debug/*"
}

project.android.applicationVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = [
                "-showWeaveInfo",
                "-1.5",
                "-inpath", javaCompile.destinationDir.toString(),
                "-aspectpath", javaCompile.classpath.asPath,
                "-d", javaCompile.destinationDir.toString(),
                "-classpath", javaCompile.classpath.asPath,
                "-bootclasspath", android.bootClasspath.join(File.pathSeparator)
        ]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}

repositories {
    mavenCentral()
}