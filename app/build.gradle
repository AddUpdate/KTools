import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.google.gms.google-services'



android {
    compileSdkVersion libVersion.compileSdkVersion
    buildToolsVersion libVersion.buildToolsVersion
    defaultConfig {
        applicationId "com.jiangkang.ktools"
        minSdkVersion libVersion.minSdkVersion
        targetSdkVersion libVersion.targetSdkVersion
        versionCode libVersion.versionCode
        versionName libVersion.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }


    dataBinding {
        enabled = true
    }


    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res/layout/activity',
                    'src/main/res/layout/fragment',
                    'src/main/res/layout/widget',
                    'src/main/res/layout/item',
                    'src/main/res'
            ]
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile deps['support-vector-drawable']
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    debugCompile deps["leakcanary"]
    releaseCompile deps["leakcanary_no_op"]

    debugCompile deps['debug_db']

    compile deps["butterKnife"]
    annotationProcessor deps['butterknifeCompiler']

    compile project(path: ':tools')

    compile deps.appcompat_v7
    compile deps.recyclerview
    compile deps.cardview
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    debugCompile 'com.readystatesoftware.chuck:library:1.1.0'
    releaseCompile 'com.readystatesoftware.chuck:library-no-op:1.1.0'

    compile deps['dagger']
    annotationProcessor deps['daggerCompiler']


    compile deps["glide"]
    compile deps["glideOkhttp"]
    annotationProcessor deps["glideCompiler"]
//    compile 'com.google.android.exoplayer:exoplayer:r2.4.3'
    compile project(path: ':requests')
    compile project(path: ':annotations')
    compile project(path: ':aop')
    compile project(path: ':hack')

    implementation "android.arch.lifecycle:runtime:1.0.3"
    implementation "android.arch.lifecycle:extensions:1.0.0-rc1"
    implementation "android.arch.persistence.room:runtime:1.0.0-rc1"
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0-rc1"
    implementation "android.arch.persistence.room:rxjava2:1.0.0-rc1"


    implementation deps.arouter.arouter_api
    annotationProcessor deps.arouter.arouter_compiler
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    compile project(path: ':widget')
}


task copy(type: Copy) {
    from "build/outputs/apk/debug/"
    into "build/outputs/apk/"
    include '**/*'
    delete "build/outputs/apk/debug/*"
}

project.android.applicationVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = [
                "-showWeaveInfo",
                "-1.5",
                "-inpath", javaCompile.destinationDir.toString(),
                "-aspectpath", javaCompile.classpath.asPath,
                "-d", javaCompile.destinationDir.toString(),
                "-classpath", javaCompile.classpath.asPath,
                "-bootclasspath", android.bootClasspath.join(File.pathSeparator)
        ]

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}
repositories {
    mavenCentral()
}